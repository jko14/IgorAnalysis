function D = read_contrast(mat_filename)
%READ_CONTRAST Read an experiment and transform colors into contrasts.
%   mat_filename: filename of file generated by "read_data.m"

data = load(mat_filename);
signal = data.signal;

[~, name, ~] = fileparts(mat_filename);
if strcmp(name(end - 2: end), 'fff')
    dark_color = data.colors.dark_color;
    bright_color = data.colors.bright_color;
    % The two numbers being averaged should be the same, and are different
    % only because of the rounding in "get_intensity_bits.m"
    dark_val = (get_intensity_bits(dark_color(2), 'Gr') + get_intensity_bits(dark_color(3), 'Br')) / 2;
    bright_val = (get_intensity_bits(bright_color(2), 'Gr') + get_intensity_bits(bright_color(3), 'Br')) / 2;
    
    D = cell(size(signal));
    for i = 1: length(signal)
        if mod(i, 2) == 1
            val = dark_val;
        else
            val = bright_val;
        end
        
        segment = signal{i};
        segment(:, 1) = segment(:, 1) - segment(1, 1);
        D{i} = [segment(:, 1), ones(size(segment, 1), 1) * val, segment(:, 3)];
    end
elseif strcmp(name(end - 6: end), 'fff_sto')
    D = cell(size(signal));
    for i = 1: length(signal)
        segment = signal{i};
        colors = cell2mat(data.colors{i});
        t_contrast = colors(:, 1);
        t_contrast = [t_contrast, t_contrast + mean(diff(t_contrast)) / 2]';
        t_contrast = t_contrast(:);
    
        %colors(:, 3) = get_intensity_bits(colors(:, 3), 'Gr');
        %colors(:, 4) = get_intensity_bits(colors(:, 4), 'Br');
        
        Green=colors(:, 3);
        
        Blue=colors(:, 4);
        
        %make this more general. here just the numbers from get_intensity
        %bits
        colors(:, 4)=(Blue.^(2.0870)).*10^-4.9674;
        colors(:, 3)=(Green.^(2.0829)).*10^-4.9514/0.8037;
       
       
      % colors(:, 4) = max(colors(:, 4),1);
       % colors(:, 3) = min(colors(:, 3),0);
     %      keyboard;
        contrast = colors(:, [3 4])';
        contrast = contrast(:);
        contrast = interp1(t_contrast, contrast, segment(:, 1), 'spline', mean(contrast));
        segment(:, 1) = segment(:, 1) - segment(1, 1);
        D{i} = [segment(:, 1), contrast, segment(:, 3)];
    end
elseif strcmp(name(end - 5: end), 'rf_sto')
    segment = signal{1};
    colors = data.colors{1};
    t_contrast = [colors{:, 1}];
    t_contrast = [t_contrast; t_contrast + mean(diff(t_contrast)) / 2];
    t_contrast = t_contrast(:);
    contrast = colors(:, 2);
    contrast = cellfun(@(x) [get_intensity_bits(x(2, :), 'Gr'); get_intensity_bits(x(3, :), 'Br')], contrast, 'UniformOutput', false);
    contrast = cell2mat(contrast);
    contrast = interp1(t_contrast, contrast, segment(:, 1), 'spline', NaN);
    segment(:, 1) = segment(:, 1) - segment(1, 1);
    D = {[segment(:, 1), contrast, segment(:, 3)]};
elseif strcmp(name(end - 8: end), 'step_cont')
    parameters = data.parameters;
    reps = parameters.reps;
    lum = parameters.lum;
    cont = parameters.cont;
    cont = cont(:);
    cont = [zeros(1, length(cont)); cont'];
    cont = [cont(:); 0];
    
    D = cell(size(signal));
    counter = 1;
    for i = 1: reps
        for j = 1: length(cont)
            val = lum * (1 - cont(j));
            segment = signal{counter};
            segment(:, 1) = segment(:, 1) - segment(1, 1);
            D{counter} = [segment(:, 1), ones(size(segment, 1), 1) * val, segment(:, 3)];
            counter = counter + 1;
            
            val = lum * (1 + cont(j));
            segment = signal{counter};
            segment(:, 1) = segment(:, 1) - segment(1, 1);
            D{counter} = [segment(:, 1), ones(size(segment, 1), 1) * val, segment(:, 3)];
            counter = counter + 1;
        end
    end
else
    error('Unsupported type of experiment.');
end

end